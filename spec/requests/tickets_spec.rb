# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/tickets', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Ticket. As you add validations to Ticket, be sure to
  # adjust the attributes here as well.

  let(:participating_seller1) { create :participating_seller }
  let(:sponsor_seller1) { create :sponsor_seller }
  let(:contact1) { create :contact }
  let(:contact2) { create :contact }

  let(:base_attributes) do
    # skip('Add a hash of attributes valid for your model')
    {
      participating_seller: participating_seller1,
      ticket_id: 'AEIO-U'
    }
  end

  let(:create_attributes) do
    {
      participating_seller_id: participating_seller1.id,
      number_of_tickets: 1
    }
  end

  let(:create_ten_attributes) do
    {
      participating_seller_id: participating_seller1.id,
      number_of_tickets: 10
    }
  end

  let(:invalid_participating_seller_attributes) do
    {
      participating_seller_id: 100,
      number_of_tickets: 1
    }
  end

  let(:invalid_number_attributes) do
    {
      participating_seller_id: 100,
      number_of_tickets: -1
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Ticket.create! base_attributes
      get tickets_url, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      ticket = Ticket.create! base_attributes
      get ticket_url(ticket), as: :json
      # binding.pry
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    
    context 'with valid parameters' do
      it 'creates a new Ticket' do
        # create :participating_seller
        expect do
          post tickets_url,
               params: create_attributes, as: :json
        end.to change(Ticket, :count).by(1)
      end

      it 'creates ten new Tickets' do
        # create :participating_seller
        expect do
          post tickets_url,
               params: create_ten_attributes, as: :json
        end.to change(Ticket, :count).by(10)
      end

      it 'renders a JSON response with the new ticket' do
        post tickets_url,
             params: create_attributes, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Ticket' do
        expect do
          post tickets_url,
               params: invalid_participating_seller_attributes, as: :json
        end.to change(Ticket, :count).by(0)
      end

      it 'renders a JSON response with errors for the new ticket' do
        post tickets_url,
             params: invalid_participating_seller_attributes, as: :json
        expect(response).to have_http_status(:not_found)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  # describe 'PATCH /update' do
  #   context 'with valid parameters' do
  #     let(:new_attributes) do
  #       skip('Add a hash of attributes valid for your model')
  #     end

  #     it 'updates the requested ticket' do
  #       ticket = Ticket.create! valid_attributes
  #       patch ticket_url(ticket),
  #             params: { ticket: invalid_attributes }, as: :json
  #       ticket.reload
  #       skip('Add assertions for updated state')
  #     end

  #     it 'renders a JSON response with the ticket' do
  #       ticket = Ticket.create! valid_attributes
  #       patch ticket_url(ticket),
  #             params: { ticket: invalid_attributes }, as: :json
  #       expect(response).to have_http_status(:ok)
  #       expect(response.content_type).to eq('application/json')
  #     end
  #   end

  #   context 'with invalid parameters' do
  #     it 'renders a JSON response with errors for the ticket' do
  #       ticket = Ticket.create! valid_attributes
  #       patch ticket_url(ticket),
  #             params: { ticket: invalid_attributes }, as: :json
  #       expect(response).to have_http_status(:unprocessable_entity)
  #       expect(response.content_type).to eq('application/json')
  #     end
  #   end
  # end

end
